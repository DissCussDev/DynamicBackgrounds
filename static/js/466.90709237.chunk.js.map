{"version":3,"file":"static/js/466.90709237.chunk.js","mappings":"qJAGA,MA4EA,EA5EoBA,KAClB,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,IAAIC,OAErCC,EAAAA,EAAAA,WAAU,KAER,MAAMC,EAAQC,YAAY,KACxBL,EAAQ,IAAIE,OACX,KAEH,MAAO,IAAMI,cAAcF,IAC1B,IAEH,MAyCMG,EAAQR,EAAKS,YAAc,GAAKT,EAAKS,WAAa,GAUxD,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAgBC,MApDbC,MAClB,MAEMC,EAFQd,EAAKS,WACHT,EAAKe,aACiB,GAEtC,IAAIC,EAkBJ,OAfEA,EADEF,GAAe,GAAKA,EAAc,GACzB,4CAGJA,GAAe,IAAMA,EAAc,GAC/B,4CAGJA,GAAe,IAAMA,EAAc,GAC/B,4CAIA,4CAGN,CAAEG,WAAYD,IA6BiBH,GAAcK,SAAA,EAClDR,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAgBC,MAAO,CAACO,QAVnBC,MACtB,MAAMC,EAAQrB,EAAKS,WACnB,OAAIY,GAAS,IAAMA,EAAQ,EAAU,EACjCA,GAAS,GAAKA,EAAQ,GAAW,GAAKA,EAAQrB,EAAKe,aAAa,KAAO,EACvEM,GAAS,IAAMA,EAAQ,IAAaA,EAAQrB,EAAKe,aAAa,GAAM,IAAM,EACvE,GAK2CK,IAAmBF,SAAA,EACjEI,EAAAA,EAAAA,KAAA,OAAKX,UAAU,WACfW,EAAAA,EAAAA,KAAA,OAAKX,UAAU,kBAEjBW,EAAAA,EAAAA,KAAA,OAAKX,UAAU,iBAAiBC,MA/BPW,MAC3B,MAKMC,GAHuB,GAFfxB,EAAKS,WACHT,EAAKe,cAImB,KAAQ,IAMhD,MAAO,CAAEU,KAAM,GAHLD,KAGcE,IAAK,GAFnB,GAAK,GAAKC,KAAKC,IAAID,KAAKE,GAAKL,EAAkB,UAqBhBD,GAAuBL,SAC3DV,GAAQc,EAAAA,EAAAA,KAAA,OAAKX,UAAU,SAAeW,EAAAA,EAAAA,KAAA,OAAKX,UAAU,eChE9D,EAJoBZ,KACXuB,EAAAA,EAAAA,KAACQ,EAAiB,G","sources":["components/backgrounds/RealTimeSky/RealTimeSky.original.js","components/backgrounds/RealTimeSky/RealTimeSky.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './RealTimeSky.css';\r\n\r\nconst RealTimeSky = () => {\r\n  const [time, setTime] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    // Update the time every minute to keep the sky in sync\r\n    const timer = setInterval(() => {\r\n      setTime(new Date());\r\n    }, 60000);\r\n\r\n    return () => clearInterval(timer);\r\n  }, []);\r\n\r\n  const getSkyStyle = () => {\r\n    const hours = time.getHours();\r\n    const minutes = time.getMinutes();\r\n    const currentTime = hours + minutes / 60;\r\n\r\n    let gradient;\r\n    // Morning (5am - 11am)\r\n    if (currentTime >= 5 && currentTime < 11) {\r\n      gradient = 'linear-gradient(to top, #a1c4fd, #c2e9fb)';\r\n    }\r\n    // Afternoon (11am - 5pm)\r\n    else if (currentTime >= 11 && currentTime < 17) {\r\n      gradient = 'linear-gradient(to top, #6dd5ed, #2193b0)';\r\n    }\r\n    // Evening (5pm - 8pm)\r\n    else if (currentTime >= 17 && currentTime < 20) {\r\n      gradient = 'linear-gradient(to top, #f3904f, #3b4371)';\r\n    }\r\n    // Night (8pm - 5am)\r\n    else {\r\n      gradient = 'linear-gradient(to top, #191970, #0c0c1e)';\r\n    }\r\n\r\n    return { background: gradient };\r\n  };\r\n\r\n  const getCelestialPosition = () => {\r\n    const hours = time.getHours();\r\n    const minutes = time.getMinutes();\r\n    const totalMinutes = hours * 60 + minutes;\r\n    \r\n    // Calculate the position based on a 24-hour cycle (1440 minutes)\r\n    const percentageOfDay = (totalMinutes / 1440) * 100;\r\n    \r\n    // This creates an arc path for the sun/moon\r\n    const x = percentageOfDay;\r\n    const y = 50 - 50 * Math.sin(Math.PI * percentageOfDay / 100);\r\n\r\n    return { left: `${x}%`, top: `${y}%` };\r\n  };\r\n  \r\n  const isDay = time.getHours() >= 6 && time.getHours() < 19;\r\n  \r\n  const getStarsOpacity = () => {\r\n    const hours = time.getHours();\r\n    if (hours >= 20 || hours < 5) return 1; // Full opacity deep in the night\r\n    if (hours >= 5 && hours < 7) return (7 - (hours + time.getMinutes()/60)) / 2; // Fade out at dawn\r\n    if (hours >= 18 && hours < 20) return ((hours + time.getMinutes()/60) - 18) / 2; // Fade in at dusk\r\n    return 0; // No stars during the day\r\n  }\r\n\r\n  return (\r\n    <div className=\"sky-container\" style={getSkyStyle()}>\r\n      <div className=\"stars-wrapper\" style={{opacity: getStarsOpacity()}}>\r\n        <div className=\"stars\"></div>\r\n        <div className=\"twinkling\"></div>\r\n      </div>\r\n      <div className=\"celestial-body\" style={getCelestialPosition()}>\r\n        {isDay ? <div className=\"sun\"></div> : <div className=\"moon\"></div>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RealTimeSky;","\nimport React from 'react';\nimport './RealTimeSky.css';\nimport OriginalComponent from './RealTimeSky.original.js';\n\nconst RealTimeSky = () => {\n  return <OriginalComponent />;\n};\n\nexport default RealTimeSky;\n"],"names":["RealTimeSky","time","setTime","useState","Date","useEffect","timer","setInterval","clearInterval","isDay","getHours","_jsxs","className","style","getSkyStyle","currentTime","getMinutes","gradient","background","children","opacity","getStarsOpacity","hours","_jsx","getCelestialPosition","percentageOfDay","left","top","Math","sin","PI","OriginalComponent"],"sourceRoot":""}