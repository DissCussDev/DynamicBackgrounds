{"version":3,"file":"StarTrails-CPYdCj70.js","sources":["../../src/components/backgrounds/StarTrails/StarTrails.original.jsx","../../src/components/backgrounds/StarTrails/StarTrails.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport './StarTrails.css';\r\n\r\nconst StarTrails = () => {\r\n  const [mousePos, setMousePos] = useState({ x: -200, y: -200 });\r\n\r\n  const handleMouseMove = useCallback((e) => {\r\n    setMousePos({ x: e.clientX, y: e.clientY });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('mousemove', handleMouseMove);\r\n    return () => {\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n    };\r\n  }, [handleMouseMove]);\r\n\r\n  useEffect(() => {\r\n    const createStar = () => {\r\n      const star = document.createElement('div');\r\n      star.className = 'star';\r\n\r\n      // Generate a random position for the star, ensuring it's not too close to the cursor\r\n      const avoidanceRadius = 150;\r\n      let x, y;\r\n      do {\r\n        x = Math.random() * window.innerWidth;\r\n        y = Math.random() * window.innerHeight;\r\n      } while (Math.sqrt(Math.pow(x - mousePos.x, 2) + Math.pow(y - mousePos.y, 2)) < avoidanceRadius);\r\n\r\n      const size = Math.random() * 3 + 1; // Star size between 1px and 4px\r\n      const hue = Math.floor(Math.random() * 360); // Random color\r\n\r\n      star.style.left = `${x}px`;\r\n      star.style.top = `${y}px`;\r\n      star.style.width = `${size}px`;\r\n      star.style.height = `${size}px`;\r\n      star.style.backgroundColor = `hsl(${hue}, 90%, 70%)`;\r\n      star.style.boxShadow = `0 0 ${Math.random() * 10 + 5}px hsl(${hue}, 90%, 70%)`;\r\n\r\n      document.body.appendChild(star);\r\n\r\n      // Remove the star after its animation completes\r\n      setTimeout(() => {\r\n        star.remove();\r\n      }, 2000); // This should match the animation duration in the CSS\r\n    };\r\n\r\n    // Create a new star every 50 milliseconds\r\n    const interval = setInterval(createStar, 50);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [mousePos]); // Rerun effect if mousePos changes to get the most up-to-date position\r\n\r\n  return React.createElement('div', { className: 'star-trails-container' });\r\n};\r\n\r\nexport default StarTrails;","\nimport React from 'react';\nimport './StarTrails.css';\nimport StarTrailsComponent from './StarTrails.original.jsx';\n\nconst StarTrails = () => {\n  return <StarTrailsComponent />;\n};\n\nexport default StarTrails;\n"],"names":["StarTrails","mousePos","setMousePos","useState","handleMouseMove","useCallback","e","useEffect","interval","star","avoidanceRadius","x","y","size","hue","React","StarTrailsComponent"],"mappings":"sDAGA,MAAMA,EAAa,IAAM,CACvB,KAAM,CAACC,EAAUC,CAAW,EAAIC,EAAAA,SAAS,CAAE,EAAG,KAAM,EAAG,KAAM,EAEvDC,EAAkBC,cAAaC,GAAM,CACzCJ,EAAY,CAAE,EAAGI,EAAE,QAAS,EAAGA,EAAE,QAAS,CAC5C,EAAG,CAAA,CAAE,EAELC,OAAAA,EAAAA,UAAU,KACR,OAAO,iBAAiB,YAAaH,CAAe,EAC7C,IAAM,CACX,OAAO,oBAAoB,YAAaA,CAAe,CACzD,GACC,CAACA,CAAe,CAAC,EAEpBG,EAAAA,UAAU,IAAM,CAgCd,MAAMC,EAAW,YA/BE,IAAM,CACvB,MAAMC,EAAO,SAAS,cAAc,KAAK,EACzCA,EAAK,UAAY,OAGjB,MAAMC,EAAkB,IACxB,IAAIC,EAAGC,EACP,GACED,EAAI,KAAK,OAAA,EAAW,OAAO,WAC3BC,EAAI,KAAK,OAAA,EAAW,OAAO,kBACpB,KAAK,KAAK,KAAK,IAAID,EAAIV,EAAS,EAAG,CAAC,EAAI,KAAK,IAAIW,EAAIX,EAAS,EAAG,CAAC,CAAC,EAAIS,GAEhF,MAAMG,EAAO,KAAK,OAAA,EAAW,EAAI,EAC3BC,EAAM,KAAK,MAAM,KAAK,OAAA,EAAW,GAAG,EAE1CL,EAAK,MAAM,KAAO,GAAGE,CAAC,KACtBF,EAAK,MAAM,IAAM,GAAGG,CAAC,KACrBH,EAAK,MAAM,MAAQ,GAAGI,CAAI,KAC1BJ,EAAK,MAAM,OAAS,GAAGI,CAAI,KAC3BJ,EAAK,MAAM,gBAAkB,OAAOK,CAAG,cACvCL,EAAK,MAAM,UAAY,OAAO,KAAK,SAAW,GAAK,CAAC,UAAUK,CAAG,cAEjE,SAAS,KAAK,YAAYL,CAAI,EAG9B,WAAW,IAAM,CACfA,EAAK,OAAA,CACP,EAAG,GAAI,CACT,EAGyC,EAAE,EAE3C,MAAO,IAAM,cAAcD,CAAQ,CACrC,EAAG,CAACP,CAAQ,CAAC,EAENc,EAAM,cAAc,MAAO,CAAE,UAAW,wBAAyB,CAC1E,EClDMf,EAAa,UACTgB,EAAA,EAAoB"}